
Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # aws_instance.linux_instance will be created
  + resource "aws_instance" "linux_instance" {
      + ami                                  = "ami-0fff1b9a61dec8a5f"
      + arn                                  = (known after apply)
      + associate_public_ip_address          = (known after apply)
      + availability_zone                    = (known after apply)
      + cpu_core_count                       = (known after apply)
      + cpu_threads_per_core                 = (known after apply)
      + disable_api_stop                     = (known after apply)
      + disable_api_termination              = (known after apply)
      + ebs_optimized                        = (known after apply)
      + get_password_data                    = false
      + host_id                              = (known after apply)
      + host_resource_group_arn              = (known after apply)
      + iam_instance_profile                 = (known after apply)
      + id                                   = (known after apply)
      + instance_initiated_shutdown_behavior = (known after apply)
      + instance_lifecycle                   = (known after apply)
      + instance_state                       = (known after apply)
      + instance_type                        = "t2.micro"
      + ipv6_address_count                   = (known after apply)
      + ipv6_addresses                       = (known after apply)
      + key_name                             = "id_rsa"
      + monitoring                           = (known after apply)
      + outpost_arn                          = (known after apply)
      + password_data                        = (known after apply)
      + placement_group                      = (known after apply)
      + placement_partition_number           = (known after apply)
      + primary_network_interface_id         = (known after apply)
      + private_dns                          = (known after apply)
      + private_ip                           = (known after apply)
      + public_dns                           = (known after apply)
      + public_ip                            = (known after apply)
      + secondary_private_ips                = (known after apply)
      + security_groups                      = (known after apply)
      + source_dest_check                    = true
      + spot_instance_request_id             = (known after apply)
      + subnet_id                            = (known after apply)
      + tags                                 = {
          + "Name" = "training-terraform-linux"
        }
      + tags_all                             = {
          + "Name" = "training-terraform-linux"
        }
      + tenancy                              = (known after apply)
      + user_data                            = (known after apply)
      + user_data_base64                     = (known after apply)
      + user_data_replace_on_change          = true
      + vpc_security_group_ids               = (known after apply)

      + capacity_reservation_specification (known after apply)

      + cpu_options (known after apply)

      + ebs_block_device (known after apply)

      + enclave_options (known after apply)

      + ephemeral_block_device (known after apply)

      + instance_market_options (known after apply)

      + maintenance_options (known after apply)

      + metadata_options (known after apply)

      + network_interface (known after apply)

      + private_dns_name_options (known after apply)

      + root_block_device (known after apply)
    }

  # aws_instance.ubuntu_instance will be created
  + resource "aws_instance" "ubuntu_instance" {
      + ami                                  = "ami-0cad6ee50670e3d0e"
      + arn                                  = (known after apply)
      + associate_public_ip_address          = (known after apply)
      + availability_zone                    = (known after apply)
      + cpu_core_count                       = (known after apply)
      + cpu_threads_per_core                 = (known after apply)
      + disable_api_stop                     = (known after apply)
      + disable_api_termination              = (known after apply)
      + ebs_optimized                        = (known after apply)
      + get_password_data                    = false
      + host_id                              = (known after apply)
      + host_resource_group_arn              = (known after apply)
      + iam_instance_profile                 = (known after apply)
      + id                                   = (known after apply)
      + instance_initiated_shutdown_behavior = (known after apply)
      + instance_lifecycle                   = (known after apply)
      + instance_state                       = (known after apply)
      + instance_type                        = "t2.micro"
      + ipv6_address_count                   = (known after apply)
      + ipv6_addresses                       = (known after apply)
      + key_name                             = "id_rsa"
      + monitoring                           = (known after apply)
      + outpost_arn                          = (known after apply)
      + password_data                        = (known after apply)
      + placement_group                      = (known after apply)
      + placement_partition_number           = (known after apply)
      + primary_network_interface_id         = (known after apply)
      + private_dns                          = (known after apply)
      + private_ip                           = (known after apply)
      + public_dns                           = (known after apply)
      + public_ip                            = (known after apply)
      + secondary_private_ips                = (known after apply)
      + security_groups                      = (known after apply)
      + source_dest_check                    = true
      + spot_instance_request_id             = (known after apply)
      + subnet_id                            = (known after apply)
      + tags                                 = {
          + "Name" = "training-terraform-ubuntu"
        }
      + tags_all                             = {
          + "Name" = "training-terraform-ubuntu"
        }
      + tenancy                              = (known after apply)
      + user_data                            = (sensitive value)
      + user_data_base64                     = (known after apply)
      + user_data_replace_on_change          = true
      + vpc_security_group_ids               = (known after apply)

      + capacity_reservation_specification (known after apply)

      + cpu_options (known after apply)

      + ebs_block_device (known after apply)

      + enclave_options (known after apply)

      + ephemeral_block_device (known after apply)

      + instance_market_options (known after apply)

      + maintenance_options (known after apply)

      + metadata_options (known after apply)

      + network_interface (known after apply)

      + private_dns_name_options (known after apply)

      + root_block_device (known after apply)
    }

  # aws_key_pair.my_key_pair will be created
  + resource "aws_key_pair" "my_key_pair" {
      + arn             = (known after apply)
      + fingerprint     = (known after apply)
      + id              = (known after apply)
      + key_name        = "id_rsa"
      + key_name_prefix = (known after apply)
      + key_pair_id     = (known after apply)
      + key_type        = (known after apply)
      + public_key      = (known after apply)
      + tags_all        = (known after apply)
    }

  # aws_security_group.linux_instance_sg will be created
  + resource "aws_security_group" "linux_instance_sg" {
      + arn                    = (known after apply)
      + description            = "EC2 Amazon Linux should not have access to the Internet, but must have outgoing and incoming access: ICMP, TCP/22, TCP/80, TCP/443 only on the local network where EC2 Ubuntu, EC2 Amazon Linux is located."
      + egress                 = (known after apply)
      + id                     = (known after apply)
      + ingress                = (known after apply)
      + name                   = "linux_instance_sg"
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags                   = {
          + "Name" = "linux_instance_sg"
        }
      + tags_all               = {
          + "Name" = "linux_instance_sg"
        }
      + vpc_id                 = "vpc-09ce3cdfec0f16a7b"
    }

  # aws_security_group.ubuntu_instance_sg will be created
  + resource "aws_security_group" "ubuntu_instance_sg" {
      + arn                    = (known after apply)
      + description            = "EC2 Ubuntu must have Internet access, there must be incoming access: ICMP, TCP/22, 80, 443, and any outgoing access."
      + egress                 = (known after apply)
      + id                     = (known after apply)
      + ingress                = (known after apply)
      + name                   = "ubuntu_instance_sg"
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags                   = {
          + "Name" = "ubuntu_instance_sg"
        }
      + tags_all               = {
          + "Name" = "ubuntu_instance_sg"
        }
      + vpc_id                 = (known after apply)
    }

  # aws_vpc_security_group_egress_rule.linux_allow_outgoing_icmp will be created
  + resource "aws_vpc_security_group_egress_rule" "linux_allow_outgoing_icmp" {
      + arn                    = (known after apply)
      + cidr_ipv4              = (known after apply)
      + from_port              = -1
      + id                     = (known after apply)
      + ip_protocol            = "icmp"
      + security_group_id      = (known after apply)
      + security_group_rule_id = (known after apply)
      + tags_all               = {}
      + to_port                = -1
    }

  # aws_vpc_security_group_egress_rule.linux_allow_outgoing_tcp_22 will be created
  + resource "aws_vpc_security_group_egress_rule" "linux_allow_outgoing_tcp_22" {
      + arn                    = (known after apply)
      + cidr_ipv4              = (known after apply)
      + from_port              = 22
      + id                     = (known after apply)
      + ip_protocol            = "tcp"
      + security_group_id      = (known after apply)
      + security_group_rule_id = (known after apply)
      + tags_all               = {}
      + to_port                = 22
    }

  # aws_vpc_security_group_egress_rule.linux_allow_outgoing_tcp_443 will be created
  + resource "aws_vpc_security_group_egress_rule" "linux_allow_outgoing_tcp_443" {
      + arn                    = (known after apply)
      + cidr_ipv4              = (known after apply)
      + from_port              = 443
      + id                     = (known after apply)
      + ip_protocol            = "tcp"
      + security_group_id      = (known after apply)
      + security_group_rule_id = (known after apply)
      + tags_all               = {}
      + to_port                = 443
    }

  # aws_vpc_security_group_egress_rule.linux_allow_outgoing_tcp_80 will be created
  + resource "aws_vpc_security_group_egress_rule" "linux_allow_outgoing_tcp_80" {
      + arn                    = (known after apply)
      + cidr_ipv4              = (known after apply)
      + from_port              = 80
      + id                     = (known after apply)
      + ip_protocol            = "tcp"
      + security_group_id      = (known after apply)
      + security_group_rule_id = (known after apply)
      + tags_all               = {}
      + to_port                = 80
    }

  # aws_vpc_security_group_egress_rule.ubuntu_allow_all_traffic_ipv4 will be created
  + resource "aws_vpc_security_group_egress_rule" "ubuntu_allow_all_traffic_ipv4" {
      + arn                    = (known after apply)
      + cidr_ipv4              = "0.0.0.0/0"
      + id                     = (known after apply)
      + ip_protocol            = "-1"
      + security_group_id      = (known after apply)
      + security_group_rule_id = (known after apply)
      + tags_all               = {}
    }

  # aws_vpc_security_group_ingress_rule.linux_allow_icmp will be created
  + resource "aws_vpc_security_group_ingress_rule" "linux_allow_icmp" {
      + arn                    = (known after apply)
      + cidr_ipv4              = (known after apply)
      + from_port              = -1
      + id                     = (known after apply)
      + ip_protocol            = "icmp"
      + security_group_id      = (known after apply)
      + security_group_rule_id = (known after apply)
      + tags_all               = {}
      + to_port                = -1
    }

  # aws_vpc_security_group_ingress_rule.linux_allow_tcp_22 will be created
  + resource "aws_vpc_security_group_ingress_rule" "linux_allow_tcp_22" {
      + arn                    = (known after apply)
      + cidr_ipv4              = (known after apply)
      + from_port              = 22
      + id                     = (known after apply)
      + ip_protocol            = "tcp"
      + security_group_id      = (known after apply)
      + security_group_rule_id = (known after apply)
      + tags_all               = {}
      + to_port                = 22
    }

  # aws_vpc_security_group_ingress_rule.linux_allow_tcp_443 will be created
  + resource "aws_vpc_security_group_ingress_rule" "linux_allow_tcp_443" {
      + arn                    = (known after apply)
      + cidr_ipv4              = (known after apply)
      + from_port              = 443
      + id                     = (known after apply)
      + ip_protocol            = "tcp"
      + security_group_id      = (known after apply)
      + security_group_rule_id = (known after apply)
      + tags_all               = {}
      + to_port                = 443
    }

  # aws_vpc_security_group_ingress_rule.linux_allow_tcp_80 will be created
  + resource "aws_vpc_security_group_ingress_rule" "linux_allow_tcp_80" {
      + arn                    = (known after apply)
      + cidr_ipv4              = (known after apply)
      + from_port              = 80
      + id                     = (known after apply)
      + ip_protocol            = "tcp"
      + security_group_id      = (known after apply)
      + security_group_rule_id = (known after apply)
      + tags_all               = {}
      + to_port                = 80
    }

  # aws_vpc_security_group_ingress_rule.ubuntu_allow_icmp will be created
  + resource "aws_vpc_security_group_ingress_rule" "ubuntu_allow_icmp" {
      + arn                    = (known after apply)
      + cidr_ipv4              = "0.0.0.0/0"
      + from_port              = -1
      + id                     = (known after apply)
      + ip_protocol            = "icmp"
      + security_group_id      = (known after apply)
      + security_group_rule_id = (known after apply)
      + tags_all               = {}
      + to_port                = -1
    }

  # aws_vpc_security_group_ingress_rule.ubuntu_allow_tcp_22 will be created
  + resource "aws_vpc_security_group_ingress_rule" "ubuntu_allow_tcp_22" {
      + arn                    = (known after apply)
      + cidr_ipv4              = "0.0.0.0/0"
      + from_port              = 22
      + id                     = (known after apply)
      + ip_protocol            = "tcp"
      + security_group_id      = (known after apply)
      + security_group_rule_id = (known after apply)
      + tags_all               = {}
      + to_port                = 22
    }

  # aws_vpc_security_group_ingress_rule.ubuntu_allow_tcp_443 will be created
  + resource "aws_vpc_security_group_ingress_rule" "ubuntu_allow_tcp_443" {
      + arn                    = (known after apply)
      + cidr_ipv4              = "0.0.0.0/0"
      + from_port              = 443
      + id                     = (known after apply)
      + ip_protocol            = "tcp"
      + security_group_id      = (known after apply)
      + security_group_rule_id = (known after apply)
      + tags_all               = {}
      + to_port                = 443
    }

  # aws_vpc_security_group_ingress_rule.ubuntu_allow_tcp_80 will be created
  + resource "aws_vpc_security_group_ingress_rule" "ubuntu_allow_tcp_80" {
      + arn                    = (known after apply)
      + cidr_ipv4              = "0.0.0.0/0"
      + from_port              = 80
      + id                     = (known after apply)
      + ip_protocol            = "tcp"
      + security_group_id      = (known after apply)
      + security_group_rule_id = (known after apply)
      + tags_all               = {}
      + to_port                = 80
    }

  # tls_private_key.rsa_key will be created
  + resource "tls_private_key" "rsa_key" {
      + algorithm                     = "RSA"
      + ecdsa_curve                   = "P224"
      + id                            = (known after apply)
      + private_key_openssh           = (sensitive value)
      + private_key_pem               = (sensitive value)
      + private_key_pem_pkcs8         = (sensitive value)
      + public_key_fingerprint_md5    = (known after apply)
      + public_key_fingerprint_sha256 = (known after apply)
      + public_key_openssh            = (known after apply)
      + public_key_pem                = (known after apply)
      + rsa_bits                      = 4096
    }

Plan: 19 to add, 0 to change, 0 to destroy.
